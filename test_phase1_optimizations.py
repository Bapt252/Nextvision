#!/usr/bin/env python3
"""
üöÄ TEST RAPIDE OPTIMISATIONS PHASE 1 - NEXTVISION
=================================================

Test des optimisations Phase 1 : 48s ‚Üí 25s
‚úÖ GPT-3.5-turbo vs GPT-4
‚úÖ Parall√©lisation CV + Job
‚úÖ Prompts optimis√©s

Usage: python test_phase1_optimizations.py
"""

import asyncio
import time
import logging
from typing import Optional

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Test data
TEST_CV_CONTENT = """
MOHAMED OUADHANE
D√©veloppeur Full Stack Senior
Email: mohamed.ouadhane@email.com
T√©l√©phone: +33 6 12 34 56 78
Localisation: Paris, France

EXP√âRIENCE PROFESSIONNELLE
D√©veloppeur Full Stack Senior | TechCorp (2020-2024)
- D√©veloppement applications web React/Node.js
- Architecture microservices AWS
- Lead technique √©quipe de 5 d√©veloppeurs
- Gestion projets agiles

D√©veloppeur Backend | StartupInnovante (2018-2020)
- API REST Python/Django
- Base de donn√©es PostgreSQL
- DevOps CI/CD

COMP√âTENCES TECHNIQUES
- Frontend: React, Vue.js, TypeScript, HTML5, CSS3
- Backend: Node.js, Python, Django, Express.js
- Base de donn√©es: PostgreSQL, MongoDB, Redis
- Cloud: AWS, Docker, Kubernetes
- Outils: Git, Jenkins, JIRA

FORMATION
Master Informatique | EPITECH (2016-2018)
Licence Informatique | Universit√© Paris 7 (2013-2016)

LANGUES
- Fran√ßais: Natif
- Anglais: Courant
- Arabe: Natif

OBJECTIF
Recherche un poste de Lead Developer dans une entreprise innovante pour √©voluer vers l'architecture logicielle.
"""

TEST_JOB_CONTENT = """
BCOM HR - Fiche de poste Assistant Facturation

POSTE : Assistant Facturation H/F
ENTREPRISE : BCOM HR Solutions
LOCALISATION : Paris 15√®me, France
TYPE DE CONTRAT : CDI
SALAIRE : 35 000‚Ç¨ - 42 000‚Ç¨ brut annuel

DESCRIPTION DU POSTE
Nous recherchons un Assistant Facturation pour rejoindre notre √©quipe comptable.
Vous serez responsable de la gestion compl√®te du processus de facturation.

MISSIONS PRINCIPALES
- √âtablissement et envoi des factures clients
- Suivi des paiements et relances
- R√©conciliation comptable
- Gestion des litiges clients
- Reporting mensuel

COMP√âTENCES REQUISES
- Bac+2 minimum en comptabilit√©/gestion
- Ma√Ætrise des outils bureautiques (Excel, Word)
- Connaissance logiciel de facturation (SAP, Sage)
- Rigueur et organisation
- Excellent relationnel client

COMP√âTENCES APPR√âCI√âES
- Exp√©rience en facturation (2+ ans)
- Anglais professionnel
- Connaissance ERP

AVANTAGES
- Tickets restaurant
- Mutuelle entreprise
- RTT
- T√©l√©travail 2 jours/semaine
- Formation continue

T√âL√âTRAVAIL : Hybride (3 jours bureau / 2 jours t√©l√©travail)
"""

async def test_original_vs_optimized():
    """Test comparaison performance original vs optimis√©"""
    
    print("üöÄ === TEST OPTIMISATIONS PHASE 1 ===")
    print(f"üìä Objectif : 48s ‚Üí 25s (48% am√©lioration)")
    print("")
    
    try:
        # Import service optimis√©
        from nextvision.services.gpt_direct_service_optimized import (
            parse_both_parallel_optimized,
            get_gpt_service_optimized_status
        )
        
        # Status service optimis√©
        status = get_gpt_service_optimized_status()
        print("üìä SERVICE OPTIMIS√â :")
        print(f"   ‚Ä¢ Version: {status['version']}")
        print(f"   ‚Ä¢ Mod√®le: {status['optimizations']['gpt_model']}")
        print(f"   ‚Ä¢ Parall√©lisation: {status['optimizations']['parallel_processing']}")
        print(f"   ‚Ä¢ R√©duction tokens: {status['optimizations']['token_reduction']}")
        print(f"   ‚Ä¢ Objectif: {status['performance']['target_improvement']}")
        print("")
        
        # Test parsing parall√®le optimis√©
        print("üöÄ Test parsing parall√®le optimis√©...")
        start_time = time.time()
        
        cv_data, job_data = await parse_both_parallel_optimized(
            cv_content=TEST_CV_CONTENT,
            job_content=TEST_JOB_CONTENT
        )
        
        end_time = time.time()
        processing_time = (end_time - start_time) * 1000
        
        print(f"‚úÖ R√âSULTATS PARSING OPTIMIS√â :")
        print(f"   ‚Ä¢ Temps total: {processing_time:.2f}ms")
        print(f"   ‚Ä¢ CV pars√©: {cv_data.name}")
        print(f"   ‚Ä¢ Job pars√©: {job_data.title if job_data else 'None'}")
        print(f"   ‚Ä¢ Comp√©tences CV: {len(cv_data.skills)} d√©tect√©es")
        print(f"   ‚Ä¢ Exp√©rience: {cv_data.years_of_experience} ans")
        
        if job_data:
            print(f"   ‚Ä¢ Comp√©tences Job: {len(job_data.required_skills)} requises")
            print(f"   ‚Ä¢ Salaire: {job_data.salary_range}")
        
        print("")
        
        # Estimation vs baseline
        estimated_baseline = 45000  # 45s baseline estim√©
        improvement_ms = estimated_baseline - processing_time
        improvement_percent = (improvement_ms / estimated_baseline) * 100
        
        print("üìä COMPARAISON PERFORMANCE :")
        print(f"   ‚Ä¢ Baseline estim√©: {estimated_baseline:.0f}ms")
        print(f"   ‚Ä¢ Optimis√© mesur√©: {processing_time:.2f}ms")
        print(f"   ‚Ä¢ Gain absolu: {improvement_ms:.2f}ms")
        print(f"   ‚Ä¢ Am√©lioration: {improvement_percent:.1f}%")
        
        # Validation objectifs
        target_25s = processing_time < 25000
        target_15s = processing_time < 15000
        
        if target_15s:
            print("üéØ OBJECTIF FINAL ATTEINT : < 15s !")
        elif target_25s:
            print("üéØ OBJECTIF PHASE 1 ATTEINT : < 25s !")
        else:
            print("‚ö†Ô∏è  Objectif Phase 1 non atteint (> 25s)")
        
        print("")
        
        return {
            "processing_time_ms": processing_time,
            "improvement_percent": improvement_percent,
            "target_25s_achieved": target_25s,
            "target_15s_achieved": target_15s,
            "cv_data": cv_data,
            "job_data": job_data
        }
        
    except ImportError as e:
        print(f"‚ùå Erreur import service optimis√©: {e}")
        print("üí° V√©rifier que le service optimis√© est bien d√©ploy√©")
        return None
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        return None

async def test_individual_components():
    """Test composants individuels optimis√©s"""
    
    print("üîç === TEST COMPOSANTS INDIVIDUELS ===")
    
    try:
        from nextvision.services.gpt_direct_service_optimized import (
            parse_cv_direct_optimized,
            parse_job_direct_optimized
        )
        
        # Test CV seul
        print("üìÑ Test CV optimis√©...")
        cv_start = time.time()
        cv_data = await parse_cv_direct_optimized(TEST_CV_CONTENT)
        cv_time = (time.time() - cv_start) * 1000
        print(f"   ‚úÖ CV: {cv_time:.2f}ms - {cv_data.name}")
        
        # Test Job seul
        print("üíº Test Job optimis√©...")
        job_start = time.time()
        job_data = await parse_job_direct_optimized(TEST_JOB_CONTENT)
        job_time = (time.time() - job_start) * 1000
        print(f"   ‚úÖ Job: {job_time:.2f}ms - {job_data.title}")
        
        # Comparaison s√©quentiel vs parall√®le
        sequential_total = cv_time + job_time
        print("")
        print("üìä COMPARAISON S√âQUENTIEL vs PARALL√àLE :")
        print(f"   ‚Ä¢ CV seul: {cv_time:.2f}ms")
        print(f"   ‚Ä¢ Job seul: {job_time:.2f}ms")
        print(f"   ‚Ä¢ Total s√©quentiel: {sequential_total:.2f}ms")
        print(f"   ‚Ä¢ Parall√®le attendu: ~{max(cv_time, job_time):.2f}ms")
        print(f"   ‚Ä¢ Gain parall√©lisation: ~{sequential_total - max(cv_time, job_time):.2f}ms")
        
        return {
            "cv_time_ms": cv_time,
            "job_time_ms": job_time,
            "sequential_total_ms": sequential_total,
            "parallel_estimate_ms": max(cv_time, job_time)
        }
        
    except Exception as e:
        print(f"‚ùå Erreur test composants: {e}")
        return None

async def main():
    """Test principal optimisations Phase 1"""
    
    print("üöÄ NEXTVISION - TEST OPTIMISATIONS PHASE 1")
    print("=" * 50)
    print("")
    
    # Test parall√©lisation optimis√©e
    parallel_results = await test_original_vs_optimized()
    
    print("")
    
    # Test composants individuels
    component_results = await test_individual_components()
    
    print("")
    print("üéØ === R√âSUM√â TESTS ===")
    
    if parallel_results:
        print(f"‚úÖ Parsing parall√®le: {parallel_results['processing_time_ms']:.2f}ms")
        print(f"‚úÖ Am√©lioration estim√©e: {parallel_results['improvement_percent']:.1f}%")
        print(f"‚úÖ Objectif Phase 1 (<25s): {'üéØ ATTEINT' if parallel_results['target_25s_achieved'] else '‚ùå Non atteint'}")
        print(f"‚úÖ Objectif Final (<15s): {'üéØ ATTEINT' if parallel_results['target_15s_achieved'] else '‚è≥ En cours'}")
    
    if component_results:
        print(f"‚úÖ Gain parall√©lisation: ~{component_results['sequential_total_ms'] - component_results['parallel_estimate_ms']:.2f}ms")
    
    print("")
    print("üéØ PROCHAINES √âTAPES :")
    print("   1. Tester avec API compl√®te via endpoint optimis√©")
    print("   2. Valider r√©sultats en conditions r√©elles")
    print("   3. Mesurer co√ªts API (90% r√©duction attendue)")
    print("   4. Si OK : Migration vers endpoint principal")
    
    print("")
    print("‚úÖ Tests optimisations Phase 1 termin√©s !")

if __name__ == "__main__":
    asyncio.run(main())
