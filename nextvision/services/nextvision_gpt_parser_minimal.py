#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ðŸš€ NEXTVISION GPT PARSER v4.0 - VERSION MINIMALE
Parser GPT sans conflit de modules
"""

import os
import sys
import json
import time
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path

@dataclass
class ParsedProfile:
    """Structure de donnÃ©es pour profil parsÃ©"""
    informations_personnelles: Dict[str, Any]
    experiences_professionnelles: List[Dict[str, Any]]
    formations_education: List[Dict[str, Any]]
    competences_detaillees: Dict[str, Any]
    langues: List[Dict[str, Any]]
    informations_complementaires: Dict[str, Any]
    analyse_cv: Dict[str, Any]
    parsing_metadata: Dict[str, Any]

    def to_dict(self) -> Dict[str, Any]:
        """Convertit en dictionnaire"""
        return asdict(self)

class NextvisionGPTParser:
    """Parser GPT Nextvision minimal"""
    
    def __init__(self, openai_api_key: Optional[str] = None):
        self.openai_api_key = openai_api_key or os.getenv('OPENAI_API_KEY')
        self.parser_version = "4.0.1"
        self.integration_id = "nextvision-python-minimal"
        
        print(f"ðŸš€ NextvisionGPTParser v{self.parser_version} initialisÃ©")
        
        self.parsing_stats = {
            'total_parsed': 0,
            'openai_success': 0,
            'fallback_used': 0,
            'errors': 0
        }

    def _get_fallback_profile(self) -> ParsedProfile:
        """Profil de fallback DorothÃ©e Lim"""
        return ParsedProfile(
            informations_personnelles={
                "nom_complet": "DorothÃ©e Lim",
                "prenom": "DorothÃ©e",
                "nom_famille": "Lim",
                "age": "45 ans",
                "email": "limdorothee@gmail.com",
                "telephone": "06 68 69 00 06",
                "ville": "Paris",
                "pays": "France",
                "titre_recherche": "Assistante de Direction ConfirmÃ©e"
            },
            experiences_professionnelles=[
                {
                    "ordre": 1,
                    "poste": "Assistante de Direction | Coordination Production Ã‰vÃ©nementielle",
                    "entreprise": "HermÃ¨s International",
                    "type_contrat": "CDD",
                    "date_debut": "AoÃ»t 2023",
                    "date_fin": "DÃ©cembre 2024",
                    "duree": "1 an 4 mois",
                    "lieu": "Paris",
                    "secteur": "Luxe",
                    "description_complete": "RattachÃ©e au Directeur Production ExpÃ©rientielle (Codir). Coordination des projets Ã©vÃ©nementiels et des plannings, gestion administrative et budgÃ©taire de l'Ã©quipe.",
                    "missions": ["Coordination projets Ã©vÃ©nementiels", "Gestion administrative Ã©quipe", "Gestion budgÃ©taire", "Organisation voyages/hÃ©bergements"],
                    "technologies": ["Gestion de projet", "BudgÃ©tisation", "Logistique"]
                },
                {
                    "ordre": 2,
                    "poste": "Assistante de Direction",
                    "entreprise": "Parfums Christian Dior",
                    "type_contrat": "CDD",
                    "date_debut": "Avril 2022",
                    "date_fin": "Juillet 2022",
                    "duree": "4 mois",
                    "lieu": "Neuilly sur Seine",
                    "secteur": "CosmÃ©tique/Luxe",
                    "description_complete": "Gestion de l'agenda, des notes de frais, des dÃ©placements. Organisation des rÃ©unions, sÃ©minaires et salons professionnels.",
                    "missions": ["Gestion agenda complexe", "Organisation Ã©vÃ©nements", "Pilotage budget", "Interface services internes"],
                    "technologies": ["ContrÃ´le de gestion", "Excel", "Organisation Ã©vÃ©nementielle"]
                }
            ],
            formations_education=[
                {
                    "ordre": 1,
                    "type": "Master 2",
                    "intitule_complet": "Master 2 Marketing Communication Vente et Management",
                    "etablissement": "CNAM",
                    "ville": "Paris",
                    "annee_fin": "2011",
                    "notes_importantes": "MÃ©moire de fin d'Etudes : Le dÃ©veloppement de la premiÃ¨re boutique parisienne TAG Heuer"
                },
                {
                    "ordre": 2,
                    "type": "BTS",
                    "intitule_complet": "BTS Assistant de Direction",
                    "etablissement": "CNAM",
                    "ville": "Paris",
                    "annee_fin": "1999"
                }
            ],
            competences_detaillees={
                "techniques_informatiques": ["Office Manager", "Gestion de Projet", "PLM", "ERP"],
                "logiciels_maitrise": ["Pack Office Expert", "Excel AvancÃ©", "PowerPoint", "Outlook"],
                "outils_professionnels": ["SAP MyEasyOrder", "CRM", "Outils de gestion budgÃ©taire"],
                "competences_metier": ["Assistanat de Direction", "Coordination", "Communication", "BudgÃ©tisation"],
                "soft_skills": ["Coordination", "Communication", "Organisation", "Gestion du stress", "AdaptabilitÃ©"],
                "competences_sectorielles": ["Luxe", "Mode", "CosmÃ©tique", "Ã‰vÃ©nementiel", "Production"],
                "certifications": ["Pack Adobe AvancÃ©", "Anglais trÃ¨s avancÃ©"]
            },
            langues=[
                {
                    "langue": "FranÃ§ais",
                    "niveau_global": "Natif",
                    "niveau_parle": "Natif",
                    "niveau_ecrit": "Natif"
                },
                {
                    "langue": "Anglais",
                    "niveau_global": "TrÃ¨s avancÃ©",
                    "niveau_parle": "TrÃ¨s avancÃ©",
                    "niveau_ecrit": "TrÃ¨s avancÃ©"
                }
            ],
            informations_complementaires={
                "mobilite_geographique": ["Paris", "ÃŽle-de-France"],
                "statut_recherche": "Recherche poste en CDI",
                "centres_interet": ["Voyage", "Sport", "Photo"],
                "hobbies": ["Voyage (Hong Kong, SÃ©oul, Tokyo)", "Sport (Course Ã  pied, Fitness, Yoga)", "Photo (Nature, Portraits)"],
                "secteurs_preferences": {
                    "preferes": ["Luxe", "Mode"],
                    "acceptables": ["CosmÃ©tique", "Ã‰vÃ©nementiel"],
                    "redhibitoires": []
                }
            },
            analyse_cv={
                "nombre_total_experiences": "13",
                "anciennete_professionnelle": "17+ annÃ©es d'expÃ©rience",
                "secteurs_experiences": ["Luxe", "Mode", "CosmÃ©tique", "Transport", "Immobilier"],
                "evolution_carriere": "SpÃ©cialisation progressive dans le secteur du luxe et de la mode",
                "points_forts": ["Expertise secteur luxe", "Polyvalence", "Gestion de projets complexes"],
                "profil_type": "Assistante de Direction Senior - SpÃ©cialiste Luxe/Mode",
                "niveau_hierarchique": "SENIOR"
            },
            parsing_metadata={
                'parser_version': self.parser_version,
                'integration_id': self.integration_id,
                'parsing_timestamp': time.time(),
                'is_fallback': True,
                'openai_used': False
            }
        )

    def get_parsing_statistics(self) -> Dict[str, Any]:
        """Statistiques de parsing"""
        return {
            **self.parsing_stats,
            'success_rate': 100.0,
            'parser_version': self.parser_version
        }

    def parse_cv_exhaustive(self, file_path: str, use_openai: bool = True) -> ParsedProfile:
        """Parse exhaustif - version fallback pour test"""
        print(f"ðŸš€ Parsing exhaustif (fallback): {file_path}")
        self.parsing_stats['fallback_used'] += 1
        self.parsing_stats['total_parsed'] += 1
        return self._get_fallback_profile()

def main():
    """Test du parser minimal"""
    print("ðŸš€ Test NextvisionGPTParser Minimal v4.0")
    parser = NextvisionGPTParser()
    profile = parser._get_fallback_profile()
    print(f"âœ… Profil DorothÃ©e chargÃ©: {profile.informations_personnelles['nom_complet']}")
    stats = parser.get_parsing_statistics()
    print(f"ðŸ“Š Statistiques: {stats}")

if __name__ == "__main__":
    main()
