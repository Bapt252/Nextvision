#!/usr/bin/env python3

"""
üß™ VALIDATION FINALE INT√âGRATION NEXTVISION GPT v3.1
"""

import sys
import time
import traceback
from pathlib import Path

def validate_integration():
    """Validation compl√®te de l'int√©gration"""
    
    print("üß™ VALIDATION FINALE NEXTVISION GPT v3.1")
    print("=" * 50)
    
    tests_passed = 0
    tests_total = 6
    
    # Test 1: Imports
    print("\nüì¶ Test 1/6: Imports des modules...")
    try:
        from services.nextvision_gpt_parser import NextvisionGPTParser
        from services.nextvision_job_parser import NextvisionJobParser
        from services.nextvision_gpt_integration import NextvisionGPTIntegration
        print("‚úÖ Imports r√©ussis")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Imports √©chou√©s: {e}")
    
    # Test 2: Initialisation
    print("\n‚öôÔ∏è Test 2/6: Initialisation...")
    try:
        parser = NextvisionGPTParser()
        job_parser = NextvisionJobParser()
        integration = NextvisionGPTIntegration()
        print("‚úÖ Initialisation r√©ussie")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Initialisation √©chou√©e: {e}")
    
    # Test 3: Fallback Doroth√©e
    print("\nüë§ Test 3/6: Profil Doroth√©e...")
    try:
        profile = parser._get_fallback_profile()
        assert profile.informations_personnelles['nom_complet'] == "Doroth√©e Lim"
        assert len(profile.experiences_professionnelles) > 0
        print("‚úÖ Profil Doroth√©e OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Profil Doroth√©e √©chou√©: {e}")
    
    # Test 4: Job posting fallback
    print("\nüíº Test 4/6: Fiche de poste...")
    try:
        job = job_parser._get_fallback_job_posting()
        assert job.informations_poste['intitule'] == "D√©veloppeur Full-Stack Senior"
        assert job.secteur_activite['secteur_detecte'] == "tech"
        print("‚úÖ Fiche de poste OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Fiche de poste √©chou√©e: {e}")
    
    # Test 5: Matching V3.1
    print("\nüéØ Test 5/6: Matching V3.1...")
    try:
        result = integration.compute_enhanced_matching(profile, job)
        assert 0 <= result.overall_score <= 1
        assert 'sector' in result.score_breakdown
        assert result.sector_compatibility >= 0
        print(f"‚úÖ Matching OK - Score: {result.overall_score:.3f}")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Matching √©chou√©: {e}")
    
    # Test 6: Performance
    print("\n‚ö° Test 6/6: Performance...")
    try:
        start_time = time.time()
        
        # Pipeline complet simul√©
        test_profile = parser._get_fallback_profile()
        test_job = job_parser._get_fallback_job_posting()
        test_result = integration.compute_enhanced_matching(test_profile, test_job)
        
        processing_time = (time.time() - start_time) * 1000
        
        if processing_time <= 100:
            print(f"‚úÖ Performance OK: {processing_time:.2f}ms < 100ms")
            tests_passed += 1
        else:
            print(f"‚ö†Ô∏è Performance limite: {processing_time:.2f}ms > 100ms")
            tests_passed += 0.5  # Demi-point car fonctionnel mais lent
            
    except Exception as e:
        print(f"‚ùå Test performance √©chou√©: {e}")
    
    # R√©sultats finaux
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DE VALIDATION")
    print("=" * 50)
    
    success_rate = (tests_passed / tests_total) * 100
    
    print(f"Tests r√©ussis: {tests_passed}/{tests_total}")
    print(f"Taux de r√©ussite: {success_rate:.1f}%")
    
    if tests_passed == tests_total:
        print("\nüéâ VALIDATION COMPL√àTE R√âUSSIE ! üéâ")
        print("‚úÖ Nextvision GPT v3.1 est pr√™t pour la production")
        print("\nüöÄ Prochaines √©tapes:")
        print("  1. Configurez votre cl√© OpenAI: export OPENAI_API_KEY='sk-...'")
        print("  2. Testez avec vos vrais CVs")
        print("  3. Int√©grez dans votre workflow")
        return True
    elif tests_passed >= tests_total * 0.8:
        print("\n‚úÖ VALIDATION MAJORITAIREMENT R√âUSSIE")
        print("‚ö†Ô∏è Quelques ajustements mineurs peuvent √™tre n√©cessaires")
        return True
    else:
        print("\n‚ùå VALIDATION √âCHOU√âE")
        print("üîß V√©rifiez les erreurs ci-dessus et relancez le d√©ploiement")
        return False

if __name__ == "__main__":
    success = validate_integration()
    sys.exit(0 if success else 1)
