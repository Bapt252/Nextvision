"""
üéØ Mod√®les Questionnaires Avanc√©s NEXTEN
Structures de donn√©es enrichies pour questionnaires complets Commitment-

Author: NEXTEN Team
Version: 1.0.0
Integration: Commitment- ‚Üí Nextvision Bridge
"""

from pydantic import BaseModel, Field, validator
from typing import Dict, List, Optional, Union
from enum import Enum
from datetime import datetime

class DisponibiliteEnum(str, Enum):
    """üìÖ √ânum√©ration des types de disponibilit√©"""
    IMMEDIATEMENT = "Imm√©diatement"
    UNE_SEMAINE = "Dans une semaine"
    DEUX_SEMAINES = "Dans 2 semaines"
    UN_MOIS = "Dans un mois"
    DEUX_MOIS = "Dans 2 mois"
    TROIS_MOIS = "Dans 3 mois"
    SIX_MOIS = "Dans 6 mois"
    PLUS_TARD = "Plus tard"

class PourquoiEcouteEnum(str, Enum):
    """üìã √ânum√©ration des raisons d'√©coute (pour pond√©ration adaptative)"""
    REMUNERATION_FAIBLE = "R√©mun√©ration trop faible"
    POSTE_INADEQUAT = "Poste ne co√Øncide pas avec poste propos√©"
    TROP_LOIN = "Poste trop loin de mon domicile"
    MANQUE_FLEXIBILITE = "Manque de flexibilit√©"
    MANQUE_PERSPECTIVES = "Manque de perspectives d'√©volution"
    MAUVAISE_AMBIANCE = "Mauvaise ambiance de travail"
    SURCHARGE_TRAVAIL = "Surcharge de travail"
    RECHERCHE_NOUVEAU_DEFI = "Recherche d'un nouveau d√©fi"

class EnvironnementTravailEnum(str, Enum):
    """üè¢ Types d'environnements de travail"""
    BUREAU_INDIVIDUEL = "Bureau individuel"
    BUREAU_PARTAGE = "Bureau partag√©"
    OPEN_SPACE = "Open space"
    COWORKING = "Espace de coworking"
    DOMICILE = "T√©l√©travail √† domicile"
    HYBRIDE = "Hybride (bureau + t√©l√©travail)"
    TERRAIN = "Travail sur le terrain"
    ATELIER = "Atelier/Usine"
    INDIFFERENT = "Indiff√©rent"

class TypeContratEnum(str, Enum):
    """üìú Types de contrats de travail"""
    CDI = "CDI"
    CDD = "CDD"
    INTERIM = "Int√©rim"
    FREELANCE = "Freelance"
    STAGE = "Stage"
    APPRENTISSAGE = "Apprentissage"
    PROFESSIONNALISATION = "Professionnalisation"
    PORTAGE_SALARIAL = "Portage salarial"

class MoyenTransportEnum(str, Enum):
    """üöó Moyens de transport"""
    VOITURE = "Voiture"
    TRANSPORT_COMMUN = "Transport en commun"
    VELO = "V√©lo"
    MARCHE = "√Ä pied"
    MOTO_SCOOTER = "Moto/Scooter"
    COVOITURAGE = "Covoiturage"
    TELETRAVAIL = "T√©l√©travail"

class MotivationEnum(str, Enum):
    """üéØ Types de motivations professionnelles"""
    EVOLUTION = "√âvolution"
    SALAIRE = "Salaire"
    FLEXIBILITE = "Flexibilit√©"
    AMBIANCE = "Ambiance de travail"
    APPRENTISSAGE = "Apprentissage"
    RECONNAISSANCE = "Reconnaissance"
    AUTONOMIE = "Autonomie"
    EQUILIBRE_VIE = "√âquilibre vie pro/perso"
    SECURITE = "S√©curit√© de l'emploi"
    INNOVATION = "Innovation/Cr√©ativit√©"

class PreavisConfig(BaseModel):
    """‚è∞ Configuration du pr√©avis"""
    duree: str = Field(..., description="Dur√©e du pr√©avis (ex: '2 mois', '3 semaines')")
    negociable: bool = Field(default=False, description="Pr√©avis n√©gociable avec l'employeur")
    reduction_possible: Optional[str] = Field(None, description="R√©duction possible du pr√©avis")
    
    class Config:
        json_schema_extra = {
            "example": {
                "duree": "2 mois",
                "negociable": True,
                "reduction_possible": "1 mois si accord mutuel"
            }
        }

class TimingDisponibilite(BaseModel):
    """üìÖ Timing complet de disponibilit√©"""
    disponibilite: DisponibiliteEnum = Field(..., description="P√©riode de disponibilit√©")
    pourquoi_a_lecoute: PourquoiEcouteEnum = Field(..., description="Raison d'√©coute (pour pond√©ration adaptative)")
    preavis: Optional[PreavisConfig] = Field(None, description="Configuration du pr√©avis")
    date_souhaitee: Optional[datetime] = Field(None, description="Date souhait√©e de prise de poste")
    contraintes_specifiques: Optional[str] = Field(None, description="Contraintes sp√©cifiques de timing")
    
    class Config:
        json_schema_extra = {
            "example": {
                "disponibilite": "Dans 2 mois",
                "pourquoi_a_lecoute": "R√©mun√©ration trop faible",
                "preavis": {
                    "duree": "2 mois",
                    "negociable": True
                },
                "date_souhaitee": "2025-09-01T00:00:00Z",
                "contraintes_specifiques": "Pr√©f√©rence pour une prise de poste en d√©but de mois"
            }
        }

class PreferencesSectorielles(BaseModel):
    """üéØ Pr√©f√©rences sectorielles d√©taill√©es"""
    preferes: List[str] = Field(default_factory=list, description="Secteurs pr√©f√©r√©s")
    redhibitoires: List[str] = Field(default_factory=list, description="Secteurs r√©dhibitoires/refus√©s")
    experience_acquise: List[str] = Field(default_factory=list, description="Secteurs avec exp√©rience")
    ouverts_decouverte: List[str] = Field(default_factory=list, description="Secteurs ouverts √† la d√©couverte")
    score_adaptation: Optional[float] = Field(None, ge=0, le=1, description="Score d'adaptabilit√© sectorielle")
    
    @validator('score_adaptation')
    def validate_score(cls, v):
        if v is not None and (v < 0 or v > 1):
            raise ValueError('Score doit √™tre entre 0 et 1')
        return v
    
    class Config:
        json_schema_extra = {
            "example": {
                "preferes": ["Technologies de l'information", "Finance", "Conseil"],
                "redhibitoires": ["Agriculture", "Industrie lourde"],
                "experience_acquise": ["Technologies de l'information", "E-commerce"],
                "ouverts_decouverte": ["FinTech", "GreenTech"],
                "score_adaptation": 0.8
            }
        }

class ConfigTransport(BaseModel):
    """üöó Configuration d√©taill√©e du transport"""
    moyens_selectionnes: List[MoyenTransportEnum] = Field(..., description="Moyens de transport accept√©s")
    temps_max: Dict[str, int] = Field(..., description="Temps maximum par moyen (en minutes)")
    distance_max_km: Optional[int] = Field(None, description="Distance maximum en kilom√®tres")
    couts_max_mensuel: Optional[int] = Field(None, description="Co√ªt transport maximum par mois (‚Ç¨)")
    flexibilite_horaires: bool = Field(default=False, description="Flexibilit√© horaires pour transport")
    
    @validator('temps_max')
    def validate_temps_max(cls, v, values):
        """Valide que les temps correspondent aux moyens s√©lectionn√©s"""
        if 'moyens_selectionnes' in values:
            moyens = [m.value.lower().replace(' ', '_').replace('/', '_') for m in values['moyens_selectionnes']]
            for moyen_key in v.keys():
                if moyen_key not in moyens:
                    # Mapping flexible pour les cl√©s
                    valid_keys = ['voiture', 'transport_commun', 'velo', 'marche', 'moto_scooter', 'covoiturage', 'teletravail']
                    if moyen_key not in valid_keys:
                        raise ValueError(f'Temps d√©fini pour moyen non s√©lectionn√©: {moyen_key}')
        return v
    
    class Config:
        json_schema_extra = {
            "example": {
                "moyens_selectionnes": ["Voiture", "Transport en commun"],
                "temps_max": {
                    "voiture": 30,
                    "transport_commun": 45
                },
                "distance_max_km": 25,
                "couts_max_mensuel": 150,
                "flexibilite_horaires": True
            }
        }

class PreferencesContrats(BaseModel):
    """üìú Pr√©f√©rences de types de contrats"""
    ordre_preference: List[TypeContratEnum] = Field(..., description="Types contrats par ordre de pr√©f√©rence")
    duree_min_cdd: Optional[int] = Field(None, description="Dur√©e minimum CDD en mois")
    ouvert_interim: bool = Field(default=False, description="Ouvert aux missions d'int√©rim")
    freelance_acceptable: bool = Field(default=False, description="Freelance acceptable")
    taux_journalier_min: Optional[int] = Field(None, description="TJM minimum pour freelance (‚Ç¨)")
    exclusions_specifiques: List[str] = Field(default_factory=list, description="Types de contrats exclus")
    
    @validator('duree_min_cdd')
    def validate_duree_cdd(cls, v):
        if v is not None and v < 1:
            raise ValueError('Dur√©e CDD minimum doit √™tre d\'au moins 1 mois')
        return v
    
    class Config:
        json_schema_extra = {
            "example": {
                "ordre_preference": ["CDI", "CDD", "Freelance"],
                "duree_min_cdd": 6,
                "ouvert_interim": False,
                "freelance_acceptable": True,
                "taux_journalier_min": 450,
                "exclusions_specifiques": ["Stage", "Apprentissage"]
            }
        }

class MotivationClassee(BaseModel):
    """üéØ Motivation avec classement et pond√©ration"""
    motivation: MotivationEnum = Field(..., description="Type de motivation")
    priorite: int = Field(..., ge=1, le=10, description="Priorit√© (1 = plus important)")
    poids: float = Field(..., ge=0, le=1, description="Poids dans l'√©valuation")
    description_personnalisee: Optional[str] = Field(None, description="Description personnalis√©e")
    
    @validator('priorite')
    def validate_priorite(cls, v):
        if v < 1 or v > 10:
            raise ValueError('Priorit√© doit √™tre entre 1 et 10')
        return v

class RankingMotivations(BaseModel):
    """üèÜ Classement complet des motivations"""
    motivations_classees: List[MotivationClassee] = Field(..., description="Motivations class√©es par priorit√©")
    poids_total_normalise: bool = Field(default=True, description="Poids normalis√©s (somme = 1)")
    facteur_adaptabilite: float = Field(default=0.8, ge=0, le=1, description="Facteur d'adaptabilit√© motivations")
    
    @validator('motivations_classees')
    def validate_motivations_unique(cls, v):
        """Valide que chaque motivation n'appara√Æt qu'une fois"""
        motivations = [m.motivation for m in v]
        if len(motivations) != len(set(motivations)):
            raise ValueError('Chaque motivation ne peut appara√Ætre qu\'une seule fois')
        return v
    
    @validator('motivations_classees')
    def validate_priorites_unique(cls, v):
        """Valide que chaque priorit√© n'appara√Æt qu'une fois"""
        priorites = [m.priorite for m in v]
        if len(priorites) != len(set(priorites)):
            raise ValueError('Chaque priorit√© doit √™tre unique')
        return v
    
    def normaliser_poids(self) -> 'RankingMotivations':
        """üîÑ Normalise les poids pour que la somme = 1"""
        total_poids = sum(m.poids for m in self.motivations_classees)
        if total_poids > 0:
            for motivation in self.motivations_classees:
                motivation.poids = motivation.poids / total_poids
        self.poids_total_normalise = True
        return self
    
    class Config:
        json_schema_extra = {
            "example": {
                "motivations_classees": [
                    {
                        "motivation": "√âvolution",
                        "priorite": 1,
                        "poids": 0.3,
                        "description_personnalisee": "Acc√®s √† des postes de management"
                    },
                    {
                        "motivation": "Salaire",
                        "priorite": 2,
                        "poids": 0.25
                    },
                    {
                        "motivation": "Flexibilit√©",
                        "priorite": 3,
                        "poids": 0.2
                    }
                ],
                "poids_total_normalise": True,
                "facteur_adaptabilite": 0.8
            }
        }

class QuestionnaireCompletAdvanced(BaseModel):
    """üìã Questionnaire complet enrichi pour Commitment-"""
    timing: TimingDisponibilite = Field(..., description="Timing et disponibilit√©")
    secteurs: PreferencesSectorielles = Field(..., description="Pr√©f√©rences sectorielles")
    environnement_travail: EnvironnementTravailEnum = Field(..., description="Environnement de travail pr√©f√©r√©")
    transport: ConfigTransport = Field(..., description="Configuration transport")
    contrats: PreferencesContrats = Field(..., description="Pr√©f√©rences de contrats")
    motivations: RankingMotivations = Field(..., description="Motivations class√©es")
    remuneration: Dict[str, int] = Field(..., description="Attentes r√©mun√©ration (min, max)")
    
    # M√©tadonn√©es de questionnaire
    version_questionnaire: str = Field(default="2.0.0", description="Version du questionnaire")
    date_completion: Optional[datetime] = Field(default_factory=datetime.now, description="Date de compl√©tion")
    completude_score: Optional[float] = Field(None, ge=0, le=1, description="Score de compl√©tude")
    
    @validator('remuneration')
    def validate_remuneration(cls, v):
        """Valide la coh√©rence des attentes salariales"""
        if 'min' not in v or 'max' not in v:
            raise ValueError('R√©mun√©ration doit contenir min et max')
        if v['min'] > v['max']:
            raise ValueError('Salaire minimum ne peut √™tre sup√©rieur au maximum')
        if v['min'] < 0 or v['max'] < 0:
            raise ValueError('Salaires doivent √™tre positifs')
        return v
    
    def calculer_score_completude(self) -> float:
        """üìä Calcule le score de compl√©tude du questionnaire"""
        score = 0.0
        total_sections = 7
        
        # Timing (obligatoire)
        score += 1.0
        
        # Secteurs
        if self.secteurs.preferes or self.secteurs.redhibitoires:
            score += 1.0
        
        # Environnement (obligatoire)
        score += 1.0
        
        # Transport
        if self.transport.moyens_selectionnes:
            score += 1.0
        
        # Contrats
        if self.contrats.ordre_preference:
            score += 1.0
        
        # Motivations
        if self.motivations.motivations_classees:
            score += 1.0
        
        # R√©mun√©ration (obligatoire)
        score += 1.0
        
        self.completude_score = score / total_sections
        return self.completude_score
    
    class Config:
        json_schema_extra = {
            "example": {
                "timing": {
                    "disponibilite": "Dans 2 mois",
                    "pourquoi_a_lecoute": "R√©mun√©ration trop faible",
                    "preavis": {
                        "duree": "2 mois",
                        "negociable": True
                    }
                },
                "secteurs": {
                    "preferes": ["Technologies de l'information", "Finance"],
                    "redhibitoires": ["Agriculture", "Industrie lourde"]
                },
                "environnement_travail": "Bureau individuel",
                "transport": {
                    "moyens_selectionnes": ["Voiture", "Transport en commun"],
                    "temps_max": {
                        "voiture": 30,
                        "transport_commun": 45
                    }
                },
                "contrats": {
                    "ordre_preference": ["CDI", "CDD", "Freelance"]
                },
                "motivations": {
                    "motivations_classees": [
                        {
                            "motivation": "√âvolution",
                            "priorite": 1,
                            "poids": 0.4
                        },
                        {
                            "motivation": "Salaire", 
                            "priorite": 2,
                            "poids": 0.35
                        }
                    ]
                },
                "remuneration": {
                    "min": 45000,
                    "max": 60000
                }
            }
        }
