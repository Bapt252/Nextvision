"""
üéØ Nextvision - Mod√®les Questionnaires Avanc√©s pour Commitment-
Structures de donn√©es enrichies pour questionnaires complets des candidats

Author: NEXTEN Team
Version: 1.0.0
Source: https://github.com/Bapt252/Commitment-
"""

from pydantic import BaseModel, Field, validator
from typing import Dict, List, Optional, Union
from datetime import datetime
from enum import Enum

class DisponibiliteType(str, Enum):
    """üïê Types de disponibilit√© candidat"""
    IMMEDIAT = "Imm√©diat"
    DANS_1_MOIS = "Dans 1 mois"
    DANS_2_MOIS = "Dans 2 mois"
    DANS_3_MOIS = "Dans 3 mois"
    DANS_6_MOIS = "Dans 6 mois"
    NON_DEFINI = "Non d√©fini"

class RaisonEcoute(str, Enum):
    """üéß Raisons d'√™tre √† l'√©coute (pond√©ration adaptative)"""
    REMUNERATION_FAIBLE = "R√©mun√©ration trop faible"
    POSTE_INADEQUAT = "Poste ne co√Øncide pas avec poste propos√©"
    POSTE_TROP_LOIN = "Poste trop loin de mon domicile"
    MANQUE_FLEXIBILITE = "Manque de flexibilit√©"
    MANQUE_PERSPECTIVES = "Manque de perspectives d'√©volution"

class EnvironnementTravail(str, Enum):
    """üè¢ Types d'environnement de travail"""
    BUREAU_INDIVIDUEL = "Bureau individuel"
    OPEN_SPACE = "Open space"
    COWORKING = "Espace de coworking"
    DOMICILE = "T√©l√©travail complet"
    HYBRIDE = "T√©l√©travail hybride"
    TERRAIN = "Travail sur le terrain"

class TypeContrat(str, Enum):
    """üìã Types de contrats de travail"""
    CDI = "CDI"
    CDD = "CDD"
    FREELANCE = "Freelance"
    INTERIM = "Int√©rim"
    STAGE = "Stage"
    APPRENTISSAGE = "Apprentissage"

class MoyenTransport(str, Enum):
    """üöó Moyens de transport"""
    VOITURE = "Voiture"
    TRANSPORT_COMMUN = "Transport en commun"
    VELO = "V√©lo"
    MARCHE = "Marche √† pied"
    MOTO = "Moto/Scooter"
    COVOITURAGE = "Covoiturage"

class TimingInfo(BaseModel):
    """‚è∞ Informations de timing du candidat"""
    disponibilite: DisponibiliteType
    pourquoi_a_lecoute: RaisonEcoute
    preavis: Dict[str, Union[str, bool]] = Field(
        default={"dur√©e": "", "n√©gociable": False},
        description="Informations sur le pr√©avis actuel"
    )
    
    @validator('preavis')
    def validate_preavis(cls, v):
        required_keys = {"dur√©e", "n√©gociable"}
        if not all(key in v for key in required_keys):
            raise ValueError(f"preavis doit contenir les cl√©s: {required_keys}")
        return v

class SecteursPreferences(BaseModel):
    """üè≠ Pr√©f√©rences sectorielles du candidat"""
    preferes: List[str] = Field(default=[], description="Secteurs pr√©f√©r√©s")
    redhibitoires: List[str] = Field(default=[], description="Secteurs √† √©viter absolument")
    
    @validator('preferes', 'redhibitoires')
    def validate_secteurs(cls, v):
        # Validation que les secteurs sont des strings non-vides
        return [s.strip() for s in v if s and s.strip()]

class TransportPreferences(BaseModel):
    """üöä Pr√©f√©rences de transport"""
    moyens_selectionnes: List[MoyenTransport] = Field(default=[], description="Moyens de transport accept√©s")
    temps_max: Dict[str, int] = Field(
        default={"voiture": 30, "transport_commun": 45},
        description="Temps de trajet maximum en minutes par moyen"
    )
    
    @validator('temps_max')
    def validate_temps_max(cls, v):
        # Validation que les temps sont positifs
        for transport, temps in v.items():
            if temps < 0:
                raise ValueError(f"Temps de trajet pour {transport} doit √™tre positif")
        return v

class ContratsPreferences(BaseModel):
    """üìù Pr√©f√©rences contractuelles"""
    ordre_preference: List[TypeContrat] = Field(default=[], description="Types de contrats par ordre de pr√©f√©rence")
    
    @validator('ordre_preference')
    def validate_ordre(cls, v):
        # V√©rifier qu'il n'y a pas de doublons
        if len(v) != len(set(v)):
            raise ValueError("Pas de doublons autoris√©s dans l'ordre de pr√©f√©rence")
        return v

class MotivationsClassees(BaseModel):
    """üéØ Motivations class√©es par priorit√©"""
    classees: List[str] = Field(default=[], description="Motivations par ordre d'importance")
    priorites: List[int] = Field(default=[], description="Scores de priorit√© (1=max, 5=min)")
    
    @validator('priorites')
    def validate_priorites(cls, v, values):
        if 'classees' in values and len(v) != len(values['classees']):
            raise ValueError("Le nombre de priorit√©s doit correspondre au nombre de motivations")
        if any(p < 1 or p > 5 for p in v):
            raise ValueError("Les priorit√©s doivent √™tre entre 1 et 5")
        return v

class RemunerationAttentes(BaseModel):
    """üí∞ Attentes de r√©mun√©ration"""
    min: int = Field(gt=0, description="Salaire minimum souhait√©")
    max: int = Field(gt=0, description="Salaire maximum esp√©r√©")
    actuel: Optional[int] = Field(None, description="Salaire actuel (si renseign√©)")
    
    @validator('max')
    def validate_max_gte_min(cls, v, values):
        if 'min' in values and v < values['min']:
            raise ValueError("Le salaire maximum doit √™tre sup√©rieur ou √©gal au minimum")
        return v

class QuestionnaireComplet(BaseModel):
    """üìã Questionnaire complet du candidat Commitment-"""
    
    # Timing et disponibilit√©
    timing: TimingInfo
    
    # Pr√©f√©rences sectorielles
    secteurs: SecteursPreferences
    
    # Environnement de travail
    environnement_travail: EnvironnementTravail
    
    # Transport
    transport: TransportPreferences
    
    # Contrats
    contrats: ContratsPreferences
    
    # Motivations
    motivations: MotivationsClassees
    
    # R√©mun√©ration
    remuneration: RemunerationAttentes
    
    # M√©tadonn√©es
    completion_date: Optional[datetime] = Field(default_factory=datetime.now)
    completion_rate: float = Field(default=0.0, ge=0.0, le=1.0, description="Taux de compl√©tion du questionnaire")
    
    def calculate_completion_rate(self) -> float:
        """üßÆ Calcule le taux de compl√©tion du questionnaire"""
        fields_completed = 0
        total_fields = 7  # timing, secteurs, environnement, transport, contrats, motivations, remuneration
        
        # V√©rification timing
        if self.timing.disponibilite and self.timing.pourquoi_a_lecoute:
            fields_completed += 1
            
        # V√©rification secteurs
        if self.secteurs.preferes or self.secteurs.redhibitoires:
            fields_completed += 1
            
        # V√©rification environnement
        if self.environnement_travail:
            fields_completed += 1
            
        # V√©rification transport
        if self.transport.moyens_selectionnes:
            fields_completed += 1
            
        # V√©rification contrats
        if self.contrats.ordre_preference:
            fields_completed += 1
            
        # V√©rification motivations
        if self.motivations.classees:
            fields_completed += 1
            
        # V√©rification r√©mun√©ration
        if self.remuneration.min > 0 and self.remuneration.max > 0:
            fields_completed += 1
        
        completion_rate = fields_completed / total_fields
        self.completion_rate = completion_rate
        return completion_rate
    
    def get_adaptive_weighting_reason(self) -> str:
        """üéØ Retourne la raison pour la pond√©ration adaptative"""
        return self.timing.pourquoi_a_lecoute.value
    
    def get_secteur_compatibility_data(self) -> Dict:
        """üè≠ Donn√©es pour analyse sectorielle"""
        return {
            "secteurs_preferes": self.secteurs.preferes,
            "secteurs_redhibitoires": self.secteurs.redhibitoires,
            "flexibilite_sectorielle": len(self.secteurs.preferes) > 3
        }
    
    def get_transport_constraints(self) -> Dict:
        """üöó Contraintes de transport pour matching g√©ographique"""
        return {
            "moyens_disponibles": [m.value for m in self.transport.moyens_selectionnes],
            "temps_max": self.transport.temps_max,
            "flexibilite_transport": len(self.transport.moyens_selectionnes) > 2
        }
    
    def get_contract_preferences_weighted(self) -> Dict:
        """üìã Pr√©f√©rences contractuelles avec pond√©ration"""
        weights = {}
        total_contracts = len(self.contrats.ordre_preference)
        
        for i, contract_type in enumerate(self.contrats.ordre_preference):
            # Score invers√© : 1er choix = score max
            weight = (total_contracts - i) / total_contracts
            weights[contract_type.value] = weight
            
        return weights
    
    def get_motivation_priority_scores(self) -> Dict:
        """üéØ Scores de priorit√© des motivations (invers√©s)"""
        scores = {}
        for motivation, priority in zip(self.motivations.classees, self.motivations.priorites):
            # Score invers√© : priorit√© 1 = score 5, priorit√© 5 = score 1
            score = 6 - priority  # Inversion pour que 1 = max score
            scores[motivation] = score / 5  # Normalisation 0-1
            
        return scores

class QuestionnaireMetadata(BaseModel):
    """üìä M√©tadonn√©es du questionnaire"""
    source: str = "https://github.com/Bapt252/Commitment-"
    version: str = "1.0.0"
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: Optional[datetime] = None
    candidat_id: Optional[str] = None
    completion_time_seconds: Optional[int] = None
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
