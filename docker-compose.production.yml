# === NEXTVISION PRODUCTION DOCKER COMPOSE ===
# Enterprise-grade production deployment with full robustness stack

version: '3.8'

services:
  # === NEXTVISION API (Main Application) ===
  nextvision-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - NEXTVISION_ENV=production
    image: nextvision:production
    container_name: nextvision-api
    restart: unless-stopped
    
    ports:
      - "8000:8000"  # API principale
      - "8090:8090"  # Prometheus metrics
    
    environment:
      # === CORE CONFIG ===
      - NEXTVISION_ENV=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - WORKER_COUNT=4
      
      # === DATABASE ===
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=nextvision_prod
      - DB_USER=nextvision_user
      - DB_PASSWORD=${DB_PASSWORD}
      
      # === REDIS ===
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # === EXTERNAL APIS ===
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      
      # === SECURITY ===
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      
      # === MONITORING ===
      - PROMETHEUS_PORT=8090
      - SENTRY_DSN=${SENTRY_DSN}
      
      # === LOGGING ===
      - LOG_LEVEL=INFO
      - LOG_FILE_PATH=/var/log/nextvision/app.log
      
      # === FEATURES ===
      - FEATURE_ADAPTIVE_WEIGHTING=true
      - FEATURE_GOOGLE_MAPS_INTELLIGENCE=true
      - FEATURE_BATCH_PROCESSING=true
      - FEATURE_CACHING=true
      - FEATURE_RETRY_MECHANISMS=true
      - FEATURE_HEALTH_MONITORING=true
      - FEATURE_STRUCTURED_LOGGING=true
      - FEATURE_PERFORMANCE_OPTIMIZATION=true
    
    volumes:
      - nextvision-logs:/var/log/nextvision
      - nextvision-cache:/tmp/nextvision
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - nextvision-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    # === SECURITY ===
    security_opt:
      - no-new-privileges:true
    read_only: false  # Nécessaire pour logs
    user: "1000:1000"
    
    # === LOGGING ===
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # === POSTGRESQL DATABASE ===
  postgres:
    image: postgres:15-alpine
    container_name: nextvision-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=nextvision_prod
      - POSTGRES_USER=nextvision_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "5432:5432"
    
    networks:
      - nextvision-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nextvision_user -d nextvision_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # === SECURITY ===
    security_opt:
      - no-new-privileges:true
    
    # === CONFIGURATION OPTIMIZATIONS ===
    command: [
      "postgres",
      "-c", "max_connections=100",
      "-c", "shared_buffers=128MB",
      "-c", "effective_cache_size=256MB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.7",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "log_statement=all",
      "-c", "log_duration=on",
      "-c", "log_min_duration_statement=1000"  # Log slow queries
    ]

  # === REDIS CACHE ===
  redis:
    image: redis:7-alpine
    container_name: nextvision-redis
    restart: unless-stopped
    
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD}",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "300", "1",
      "--appendonly", "yes",
      "--appendfsync", "everysec",
      "--tcp-keepalive", "60",
      "--timeout", "300"
    ]
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
    
    networks:
      - nextvision-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    
    # === SECURITY ===
    security_opt:
      - no-new-privileges:true

  # === PROMETHEUS MONITORING ===
  prometheus:
    image: prom/prometheus:latest
    container_name: nextvision-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    networks:
      - nextvision-network
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    depends_on:
      - nextvision-api

  # === GRAFANA DASHBOARDS ===
  grafana:
    image: grafana/grafana:latest
    container_name: nextvision-grafana
    restart: unless-stopped
    
    ports:
      - "3001:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - nextvision-network
    
    depends_on:
      - prometheus

  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: nextvision-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nextvision-logs:/var/log/nginx
    
    networks:
      - nextvision-network
    
    depends_on:
      - nextvision-api
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # === LOG AGGREGATION (OPTIONAL) ===
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: nextvision-fluentd
    restart: unless-stopped
    
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - nextvision-logs:/var/log/nextvision:ro
    
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    
    networks:
      - nextvision-network
    
    depends_on:
      - nextvision-api

  # === BACKUP SERVICE ===
  backup:
    image: alpine:latest
    container_name: nextvision-backup
    restart: "no"  # Lancé par cron
    
    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - nextvision-logs:/backup/logs:ro
      - ./scripts/backup.sh:/backup/backup.sh:ro
    
    networks:
      - nextvision-network
    
    entrypoint: ["/backup/backup.sh"]

# === NETWORKS ===
networks:
  nextvision-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === VOLUMES ===
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  nextvision-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  nextvision-cache:
    driver: local

# === SECRETS MANAGEMENT ===
# Pour production, utiliser Docker Secrets ou un gestionnaire externe
# secrets:
#   db_password:
#     external: true
#   redis_password:
#     external: true
#   google_maps_api_key:
#     external: true
#   secret_key:
#     external: true
