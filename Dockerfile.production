# üöÄ Nextvision Production Dockerfile
# Multi-stage build optimis√© pour performance et s√©curit√©

# ===============================================
# üì¶ STAGE 1: BUILD DEPENDENCIES
# ===============================================

FROM python:3.11-slim as builder

# Variables build
ARG BUILD_DATE
ARG VERSION=2.0.0
ARG VCS_REF

# Labels
LABEL maintainer="NEXTEN Team" \
      version="${VERSION}" \
      description="Nextvision Production API - Enterprise Grade" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Installation d√©pendances syst√®me pour build
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Cr√©ation utilisateur non-root
RUN groupadd -r nextvision && \
    useradd -r -g nextvision -d /app -s /bin/bash nextvision

# Configuration Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# R√©pertoire de travail
WORKDIR /app

# Installation requirements Python
COPY nextvision/requirements-production.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements-production.txt && \
    pip install gunicorn uvicorn[standard]

# ===============================================
# üéØ STAGE 2: PRODUCTION RUNTIME
# ===============================================

FROM python:3.11-slim as production

# Variables runtime
ENV ENVIRONMENT=production \
    WORKERS=8 \
    MAX_REQUESTS=1000 \
    TIMEOUT=30 \
    KEEPALIVE=2 \
    PYTHONPATH=/app \
    LOG_LEVEL=info

# Installation runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get purge -y --auto-remove

# Cr√©ation utilisateur
RUN groupadd -r nextvision && \
    useradd -r -g nextvision -d /app -s /bin/bash nextvision

# R√©pertoire de travail
WORKDIR /app

# Copie des d√©pendances depuis builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copie du code application
COPY --chown=nextvision:nextvision . .

# Configuration production
COPY --chown=nextvision:nextvision gunicorn.conf.py .
COPY --chown=nextvision:nextvision nextvision/requirements-production.txt .

# Cr√©ation r√©pertoires n√©cessaires
RUN mkdir -p /app/logs /app/tmp /app/data && \
    chown -R nextvision:nextvision /app

# Configuration s√©curit√©
RUN chmod -R 755 /app && \
    chmod -R 644 /app/nextvision && \
    chmod +x /app/main.py

# Health check script
COPY --chown=nextvision:nextvision scripts/healthcheck.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck.sh

# Switch to non-root user
USER nextvision

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Volume pour logs
VOLUME ["/app/logs"]

# Point d'entr√©e
ENTRYPOINT ["dumb-init", "--"]

# Commande par d√©faut
CMD ["gunicorn", "main:app", "-c", "gunicorn.conf.py"]

# ===============================================
# üîß BUILD INSTRUCTIONS
# ===============================================

# Build:
# docker build -f Dockerfile.production -t nextvision:production .

# Build avec args:
# docker build -f Dockerfile.production \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg VCS_REF=$(git rev-parse --short HEAD) \
#   -t nextvision:production .

# Run:
# docker run -d -p 8000:8000 \
#   -e GOOGLE_MAPS_API_KEY=your_key \
#   -e DB_PASSWORD=your_password \
#   --name nextvision-prod \
#   nextvision:production

# Multi-stage benefits:
# - R√©duction taille image (build deps supprim√©es)
# - S√©curit√© (utilisateur non-root)
# - Performance (optimisations Python)
# - Monitoring (health checks)
