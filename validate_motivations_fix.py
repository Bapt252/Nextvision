#!/usr/bin/env python3
"""
üîß SCRIPT DE VALIDATION RAPIDE - MotivationsAlignmentScorer
==========================================================

Script de validation pour v√©rifier que le probl√®me JobData est r√©solu
et que l'int√©gration motivations fonctionne correctement.

Usage: python validate_motivations_fix.py
"""

import sys
import os
import time

# Add nextvision to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """üîå Test des imports"""
    print("üîå Test imports...")
    try:
        from nextvision.engines.motivations_scoring_engine import (
            MotivationsAlignmentScorer,
            create_complete_job_data,
            create_complete_cv_data,
            motivations_scoring_engine
        )
        from nextvision.services.gpt_direct_service import JobData, CVData
        print("   ‚úÖ Tous les imports r√©ussis")
        return True
    except ImportError as e:
        print(f"   ‚ùå Erreur import: {e}")
        return False

def test_jobdata_structure():
    """üèóÔ∏è Test structure JobData compl√®te"""
    print("üèóÔ∏è Test structure JobData...")
    try:
        from nextvision.engines.motivations_scoring_engine import create_complete_job_data
        
        # Test cr√©ation job simple
        job = create_complete_job_data(
            title="Test Engineer",
            company="Test Corp"
        )
        
        # V√©rification tous les champs requis
        required_fields = [
            'title', 'company', 'location', 'contract_type', 
            'required_skills', 'preferred_skills', 'responsibilities',
            'requirements', 'benefits', 'salary_range', 'remote_policy'
        ]
        
        for field in required_fields:
            if not hasattr(job, field):
                print(f"   ‚ùå Champ manquant: {field}")
                return False
        
        print(f"   ‚úÖ JobData compl√®te: {job.title} chez {job.company}")
        print(f"   ‚úÖ Tous les {len(required_fields)} champs pr√©sents")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur structure JobData: {e}")
        return False

def test_motivations_scoring():
    """üéØ Test scoring motivationnel"""
    print("üéØ Test scoring motivationnel...")
    try:
        from nextvision.engines.motivations_scoring_engine import (
            create_complete_job_data,
            create_complete_cv_data,
            motivations_scoring_engine
        )
        
        # Donn√©es test
        candidate = create_complete_cv_data(
            name="Test Candidat",
            skills=["Python", "Leadership", "Innovation"],
            objective="Recherche poste avec innovation et leadership"
        )
        
        job = create_complete_job_data(
            title="Senior Developer",
            company="InnovCorp",
            required_skills=["Python", "Leadership"],
            benefits=["Innovation continue", "Leadership √©quipe", "√âvolution rapide"]
        )
        
        # Test scoring
        start_time = time.time()
        result = motivations_scoring_engine.score_motivations_alignment(
            candidate_data=candidate,
            job_data=job,
            candidate_motivations=["Innovation", "Leadership", "√âvolution"]
        )
        processing_time = (time.time() - start_time) * 1000
        
        # Validation r√©sultat
        if not (0.0 <= result.overall_score <= 1.0):
            print(f"   ‚ùå Score invalide: {result.overall_score}")
            return False
        
        if not (0.0 <= result.confidence <= 1.0):
            print(f"   ‚ùå Confiance invalide: {result.confidence}")
            return False
        
        print(f"   ‚úÖ Score: {result.overall_score:.3f}")
        print(f"   ‚úÖ Confiance: {result.confidence:.3f}")
        print(f"   ‚úÖ Temps: {processing_time:.2f}ms")
        print(f"   ‚úÖ Performance: {'üöÄ Excellent' if processing_time < 5 else '‚úÖ Bon' if processing_time < 10 else '‚ö†Ô∏è Lent'}")
        
        if len(result.motivation_scores) > 0:
            print(f"   ‚úÖ Motivations analys√©es: {len(result.motivation_scores)}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur scoring: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_performance():
    """‚ö° Test performance multiple"""
    print("‚ö° Test performance multiple...")
    try:
        from nextvision.engines.motivations_scoring_engine import (
            create_complete_job_data,
            create_complete_cv_data,
            motivations_scoring_engine
        )
        
        candidate = create_complete_cv_data(name="Perf User")
        job = create_complete_job_data(title="Perf Job", company="Perf Corp")
        
        times = []
        for i in range(5):
            start = time.time()
            result = motivations_scoring_engine.score_motivations_alignment(
                candidate_data=candidate,
                job_data=job
            )
            times.append((time.time() - start) * 1000)
        
        avg_time = sum(times) / len(times)
        min_time = min(times)
        
        print(f"   ‚úÖ Temps moyen: {avg_time:.2f}ms")
        print(f"   ‚úÖ Temps min: {min_time:.2f}ms")
        print(f"   ‚úÖ Objectif < 5ms: {'‚úÖ' if avg_time < 5 else '‚ö†Ô∏è' if avg_time < 10 else '‚ùå'}")
        
        return avg_time < 10  # Acceptable si < 10ms
        
    except Exception as e:
        print(f"   ‚ùå Erreur performance: {e}")
        return False

def test_original_problem():
    """üîß Test du probl√®me original r√©solu"""
    print("üîß Test probl√®me original (TypeError resolved)...")
    try:
        from nextvision.services.gpt_direct_service import JobData
        
        # Test que l'ancien code √©choue toujours (normal)
        try:
            job = JobData(
                title="AI Engineer",
                benefits=["Innovation"], 
                responsibilities=["IA"]
            )
            print("   ‚ö†Ô∏è Ancien code devrait √©chouer mais fonctionne")
            return False
        except TypeError:
            print("   ‚úÖ Ancien code √©choue comme attendu (TypeError)")
        
        # Test que la nouvelle m√©thode fonctionne
        from nextvision.engines.motivations_scoring_engine import create_complete_job_data
        
        job = create_complete_job_data(
            title="AI Engineer",
            company="TechCorp",
            benefits=["Innovation", "T√©l√©travail"],
            responsibilities=["D√©veloppement IA", "Innovation produits"]
        )
        
        print(f"   ‚úÖ Nouvelle m√©thode fonctionne: {job.title}")
        print("   ‚úÖ Probl√®me TypeError: R√âSOLU")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur test probl√®me: {e}")
        return False

def test_api_integration():
    """üåê Test int√©gration API (v√©rification imports)"""
    print("üåê Test int√©gration API...")
    try:
        # Test que l'endpoint peut importer le scorer
        from nextvision.api.v3.intelligent_matching import (
            IntelligentMatchingService
        )
        
        service = IntelligentMatchingService()
        
        if hasattr(service, 'motivations_scorer'):
            if service.motivations_scorer is not None:
                print("   ‚úÖ MotivationsScorer int√©gr√© dans IntelligentMatchingService")
            else:
                print("   ‚ö†Ô∏è MotivationsScorer non disponible (mode fallback)")
        else:
            print("   ‚ùå MotivationsScorer non trouv√© dans service")
            return False
        
        print("   ‚úÖ Int√©gration API: OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur int√©gration API: {e}")
        return False

def main():
    """üöÄ Validation compl√®te"""
    print("üîß VALIDATION MOTIVATIONS ALIGNMENT SCORER")
    print("=" * 50)
    print("‚úÖ Objectif: V√©rifier r√©solution probl√®me JobData")
    print("‚úÖ Validation: Int√©gration motivations compl√®te")
    print()
    
    tests = [
        ("Imports", test_imports),
        ("Structure JobData", test_jobdata_structure),
        ("Scoring Motivations", test_motivations_scoring),
        ("Performance", test_performance),
        ("Probl√®me Original", test_original_problem),
        ("Int√©gration API", test_api_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20}")
        print(f"üß™ {test_name}")
        print(f"{'='*20}")
        
        success = test_func()
        results.append((test_name, success))
        
        if success:
            print(f"‚úÖ {test_name}: SUCC√àS")
        else:
            print(f"‚ùå {test_name}: √âCHEC")
    
    # Bilan final
    print("\n" + "="*50)
    print("üèÜ BILAN VALIDATION")
    print("="*50)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"   {test_name}: {status}")
    
    print(f"\nR√©sultat: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("\nüéâ VALIDATION COMPL√àTE: SUCC√àS!")
        print("‚úÖ Probl√®me JobData: R√âSOLU")
        print("‚úÖ MotivationsAlignmentScorer: OP√âRATIONNEL")
        print("‚úÖ Int√©gration API: PR√äTE")
        print("üöÄ PR√äT POUR PRODUCTION!")
        return True
    else:
        print(f"\n‚ö†Ô∏è VALIDATION PARTIELLE: {passed}/{total}")
        print("üîß Certains tests n√©cessitent attention")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
