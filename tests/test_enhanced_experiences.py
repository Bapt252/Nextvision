"""
üß™ TESTS ENHANCED EXPERIENCES - NEXTVISION v3.2.1
=================================================

Tests et exemples d'utilisation du nouveau syst√®me Enhanced Experiences
avec parsing granulaire et endpoint enrichi.

Author: NEXTEN Team
Version: 3.2.1 - Enhanced Experiences
Innovation: Tests granularit√© maximale + performance optimis√©e
"""

import asyncio
import json
import time
from typing import Dict, Any
import logging

# Configuration logging pour tests
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üÜï Import des nouvelles structures Enhanced
try:
    from nextvision.services.gpt_direct_service_optimized import (
        EnhancedCVData,
        DetailedExperience,
        parse_cv_with_detailed_experiences,
        parse_both_parallel_enhanced,
        get_enhanced_service_status
    )
    ENHANCED_AVAILABLE = True
    logger.info("‚úÖ Enhanced Experiences structures imported successfully")
except ImportError as e:
    ENHANCED_AVAILABLE = False
    logger.error(f"‚ùå Enhanced Experiences not available: {e}")

# Import adaptateur enrichi
try:
    from nextvision.adapters.parsing_to_matching_adapter import (
        create_enhanced_unified_matching_request,
        extract_motivations_from_experiences,
        analyze_career_progression,
        ENHANCED_STRUCTURES_AVAILABLE
    )
    ENHANCED_ADAPTER_AVAILABLE = True
    logger.info("‚úÖ Enhanced Adapter imported successfully")
except ImportError as e:
    ENHANCED_ADAPTER_AVAILABLE = False
    logger.error(f"‚ùå Enhanced Adapter not available: {e}")

class EnhancedExperiencesTests:
    """
    üß™ CLASSE DE TESTS ENHANCED EXPERIENCES
    ======================================
    
    Tests complets du syst√®me Enhanced Experiences :
    - Parsing CV avec exp√©riences d√©taill√©es
    - Adaptation enrichie vers MatchingRequest
    - Extraction automatique motivations
    - Analyse progression carri√®re
    - Performance et granularit√©
    """
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
    async def run_all_tests(self):
        """üöÄ Lance tous les tests Enhanced Experiences"""
        
        self.logger.info("üß™ === D√âMARRAGE TESTS ENHANCED EXPERIENCES v3.2.1 ===")
        
        if not ENHANCED_AVAILABLE:
            self.logger.error("‚ùå Enhanced structures not available, skipping tests")
            return
        
        tests_results = {}
        
        # Test 1: Status service Enhanced
        tests_results["service_status"] = await self.test_enhanced_service_status()
        
        # Test 2: Parsing CV Enhanced avec donn√©es r√©alistes
        tests_results["cv_parsing_enhanced"] = await self.test_cv_parsing_enhanced()
        
        # Test 3: Adaptateur Enhanced
        tests_results["adapter_enhanced"] = await self.test_enhanced_adapter()
        
        # Test 4: Extraction motivations automatique
        tests_results["motivations_extraction"] = await self.test_motivations_extraction()
        
        # Test 5: Analyse progression carri√®re
        tests_results["career_analysis"] = await self.test_career_progression_analysis()
        
        # Test 6: Performance Enhanced vs Standard
        tests_results["performance_comparison"] = await self.test_performance_comparison()
        
        # R√©sum√© des tests
        self.print_tests_summary(tests_results)
        
        return tests_results
    
    async def test_enhanced_service_status(self) -> Dict[str, Any]:
        """üìä Test status service Enhanced"""
        self.logger.info("üîç Test 1: Enhanced Service Status")
        
        try:
            status = get_enhanced_service_status()
            
            self.logger.info(f"‚úÖ Service Enhanced: {status['service']}")
            self.logger.info(f"üìä Version: {status['version']}")
            self.logger.info(f"üéØ Features: {len(status['features'])} disponibles")
            
            return {
                "success": True,
                "status": status,
                "features_count": len(status['features']),
                "performance_target": status['performance']['target_time']
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced service status failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_cv_parsing_enhanced(self) -> Dict[str, Any]:
        """üìÑ Test parsing CV Enhanced avec donn√©es r√©alistes"""
        self.logger.info("üîç Test 2: CV Parsing Enhanced")
        
        # CV test r√©aliste avec exp√©riences multiples
        cv_content_test = """
        Zachary Martin
        Email: zachary.martin@email.com
        T√©l√©phone: +33 6 12 34 56 78
        Localisation: Paris, France
        
        EXP√âRIENCE PROFESSIONNELLE
        
        Business Development Manager - Tech Innovation Corp (2023-2024)
        Secteur: Technology/SaaS | CDI | Management √©quipe 5 personnes
        ‚Ä¢ D√©veloppement portefeuille client B2B - 50 nouveaux clients acquis
        ‚Ä¢ √âlaboration strat√©gie commerciale multi-canal
        ‚Ä¢ Management √©quipe 5 commerciaux juniors
        ‚Ä¢ N√©gociation contrats > 100k‚Ç¨ avec grands comptes
        ‚Ä¢ Mise en place processus CRM Salesforce
        R√©alisations:
        ‚Ä¢ Augmentation CA 35% sur 12 mois
        ‚Ä¢ Fid√©lisation client 95%
        ‚Ä¢ Digitalisation compl√®te processus commercial
        Technologies: Salesforce, HubSpot, Power BI
        
        Sales Executive - Digital Solutions Ltd (2021-2023)
        Secteur: Digital Marketing | CDI | Senior
        ‚Ä¢ Prospection et d√©veloppement commercial B2B
        ‚Ä¢ Gestion portefeuille 80 clients PME
        ‚Ä¢ Accompagnement transformation digitale clients
        ‚Ä¢ Formation √©quipe aux nouvelles solutions
        R√©alisations:
        ‚Ä¢ 120% objectifs commerciaux atteints
        ‚Ä¢ 30 clients fid√©lis√©s sur 2 ans
        ‚Ä¢ Prix "Meilleur vendeur 2022"
        Technologies: CRM Pipedrive, LinkedIn Sales Navigator
        
        Junior Sales Representative - StartupTech (2020-2021)
        Secteur: Fintech | Stage puis CDD | Junior
        ‚Ä¢ Premi√®re exp√©rience commerciale
        ‚Ä¢ Prospection t√©l√©phonique et email
        ‚Ä¢ Support √©quipe senior
        R√©alisations:
        ‚Ä¢ 15 nouveaux prospects qualifi√©s/mois
        ‚Ä¢ Conversion 25% prospects en clients
        
        FORMATION
        Master Commerce International - ESSEC Business School (2020)
        Licence Commerce - Universit√© Paris Dauphine (2018)
        
        COMP√âTENCES
        CRM (Salesforce, HubSpot), N√©gociation, Management, B2B, Prospection, 
        Digital Marketing, Analyse de donn√©es, Leadership
        
        LANGUES
        Fran√ßais (natif), Anglais (courant), Espagnol (interm√©diaire)
        
        CERTIFICATIONS
        Salesforce Certified Administrator
        Google Analytics Certified
        """
        
        try:
            start_time = time.time()
            
            # Test parsing Enhanced
            enhanced_cv_data = await parse_cv_with_detailed_experiences(cv_content_test)
            
            parsing_time = (time.time() - start_time) * 1000
            
            # Validation r√©sultats
            success = (
                enhanced_cv_data.name != "Candidat Test" and
                len(enhanced_cv_data.experiences) > 0 and
                len(enhanced_cv_data.skills) > 0
            )
            
            self.logger.info(f"‚úÖ CV Enhanced parsing: {enhanced_cv_data.name}")
            self.logger.info(f"üìä Exp√©riences d√©taill√©es: {len(enhanced_cv_data.experiences)}")
            self.logger.info(f"üéØ Total missions: {sum(len(exp.missions) for exp in enhanced_cv_data.experiences)}")
            self.logger.info(f"üìà Total achievements: {sum(len(exp.achievements) for exp in enhanced_cv_data.experiences)}")
            self.logger.info(f"‚è±Ô∏è Parsing time: {parsing_time:.2f}ms")
            
            return {
                "success": success,
                "candidate_name": enhanced_cv_data.name,
                "experiences_count": len(enhanced_cv_data.experiences),
                "total_missions": sum(len(exp.missions) for exp in enhanced_cv_data.experiences),
                "total_achievements": sum(len(exp.achievements) for exp in enhanced_cv_data.experiences),
                "skills_count": len(enhanced_cv_data.skills),
                "parsing_time_ms": parsing_time,
                "data_richness": "enhanced" if len(enhanced_cv_data.experiences) > 1 else "standard",
                "enhanced_cv_data": enhanced_cv_data  # Pour tests suivants
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced CV parsing failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_enhanced_adapter(self) -> Dict[str, Any]:
        """üîÑ Test adaptateur Enhanced"""
        self.logger.info("üîç Test 3: Enhanced Adapter")
        
        if not ENHANCED_ADAPTER_AVAILABLE:
            return {"success": False, "error": "Enhanced adapter not available"}
        
        try:
            # R√©cup√©ration donn√©es CV Enhanced du test pr√©c√©dent
            cv_test = await self.test_cv_parsing_enhanced()
            if not cv_test["success"]:
                return {"success": False, "error": "CV parsing failed for adapter test"}
            
            enhanced_cv_data = cv_test["enhanced_cv_data"]
            
            start_time = time.time()
            
            # Test adaptation Enhanced
            adaptation_result = create_enhanced_unified_matching_request(
                enhanced_cv_data=enhanced_cv_data,
                job_data=None,
                pourquoi_ecoute="Recherche nouveau d√©fi avec √©volution management",
                additional_context={"motivations": ["Management", "Innovation"]}
            )
            
            adaptation_time = (time.time() - start_time) * 1000
            
            self.logger.info(f"‚úÖ Enhanced adaptation: {adaptation_result.success}")
            self.logger.info(f"üîß Adaptations applied: {len(adaptation_result.adaptations_applied)}")
            self.logger.info(f"‚è±Ô∏è Adaptation time: {adaptation_time:.2f}ms")
            
            if adaptation_result.matching_request:
                candidate = adaptation_result.matching_request.candidate_profile
                self.logger.info(f"üë§ Candidate: {candidate.personal_info.firstName} {candidate.personal_info.lastName}")
                self.logger.info(f"üõ†Ô∏è Skills enriched: {len(candidate.skills)}")
                self.logger.info(f"üìÖ Experience years: {candidate.experience_years}")
            
            return {
                "success": adaptation_result.success,
                "adaptations_count": len(adaptation_result.adaptations_applied),
                "adaptation_time_ms": adaptation_time,
                "candidate_skills_count": len(adaptation_result.matching_request.candidate_profile.skills) if adaptation_result.matching_request else 0,
                "validation_errors": adaptation_result.validation_errors,
                "enhanced_features": adaptation_result.metadata.get("enhanced_features", {})
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced adapter test failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_motivations_extraction(self) -> Dict[str, Any]:
        """üéØ Test extraction automatique motivations"""
        self.logger.info("üîç Test 4: Motivations Extraction")
        
        if not ENHANCED_ADAPTER_AVAILABLE:
            return {"success": False, "error": "Enhanced adapter not available"}
        
        try:
            # R√©cup√©ration donn√©es CV Enhanced
            cv_test = await self.test_cv_parsing_enhanced()
            if not cv_test["success"]:
                return {"success": False, "error": "CV parsing failed for motivations test"}
            
            enhanced_cv_data = cv_test["enhanced_cv_data"]
            
            # Extraction motivations automatique
            motivations = extract_motivations_from_experiences(enhanced_cv_data)
            
            self.logger.info(f"‚úÖ Motivations auto-d√©tect√©es: {len(motivations)}")
            self.logger.info(f"üéØ Motivations: {motivations}")
            
            # Validation logique m√©tier
            expected_motivations = ["Management", "R√©sultats", "√âvolution"]
            found_expected = sum(1 for mot in expected_motivations if mot in motivations)
            
            return {
                "success": len(motivations) > 0,
                "motivations_detected": motivations,
                "motivations_count": len(motivations),
                "expected_found": found_expected,
                "detection_accuracy": found_expected / len(expected_motivations) if expected_motivations else 0
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Motivations extraction failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_career_progression_analysis(self) -> Dict[str, Any]:
        """üìà Test analyse progression carri√®re"""
        self.logger.info("üîç Test 5: Career Progression Analysis")
        
        if not ENHANCED_ADAPTER_AVAILABLE:
            return {"success": False, "error": "Enhanced adapter not available"}
        
        try:
            # R√©cup√©ration donn√©es CV Enhanced
            cv_test = await self.test_cv_parsing_enhanced()
            if not cv_test["success"]:
                return {"success": False, "error": "CV parsing failed for career analysis"}
            
            enhanced_cv_data = cv_test["enhanced_cv_data"]
            
            # Analyse progression carri√®re
            career_analysis = analyze_career_progression(enhanced_cv_data)
            
            self.logger.info(f"‚úÖ Career progression analyzed")
            self.logger.info(f"üìä Career path: {career_analysis['career_path']}")
            self.logger.info(f"üè¢ Sectors: {career_analysis['sectors_evolution']}")
            self.logger.info(f"üë• Management: {career_analysis['management_progression']}")
            self.logger.info(f"üìÖ Total span: {career_analysis['career_span_months']} months")
            
            return {
                "success": True,
                "career_analysis": career_analysis,
                "experiences_analyzed": career_analysis["total_experiences"],
                "career_span_months": career_analysis["career_span_months"],
                "progression_detected": len(career_analysis["management_progression"]) > 0
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Career progression analysis failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_performance_comparison(self) -> Dict[str, Any]:
        """‚ö° Test comparaison performance Enhanced vs Standard"""
        self.logger.info("üîç Test 6: Performance Comparison")
        
        cv_content = """Jean Dupont, D√©veloppeur Senior, 5 ans exp√©rience, 
        Python, JavaScript, React, Node.js, Paris"""
        
        try:
            # Test Standard
            start_standard = time.time()
            # Simulation parsing standard (pas de d√©tails)
            await asyncio.sleep(0.01)  # Simulation
            standard_time = (time.time() - start_standard) * 1000
            
            # Test Enhanced
            start_enhanced = time.time()
            enhanced_cv = await parse_cv_with_detailed_experiences(cv_content)
            enhanced_time = (time.time() - start_enhanced) * 1000
            
            # Comparaison
            time_difference = enhanced_time - standard_time
            data_richness_ratio = len(enhanced_cv.experiences) * 10  # Simulation richesse
            
            self.logger.info(f"‚ö° Standard time: {standard_time:.2f}ms")
            self.logger.info(f"üåü Enhanced time: {enhanced_time:.2f}ms")
            self.logger.info(f"üìä Time difference: +{time_difference:.2f}ms")
            self.logger.info(f"üìà Data richness: +{data_richness_ratio}%")
            
            # Validation objectif < 30s
            target_achieved = enhanced_time < 30000
            
            return {
                "success": True,
                "standard_time_ms": standard_time,
                "enhanced_time_ms": enhanced_time,
                "time_difference_ms": time_difference,
                "data_richness_improvement": f"+{data_richness_ratio}%",
                "target_30s_achieved": target_achieved,
                "performance_grade": "üåü EXCELLENT" if target_achieved else "‚úÖ GOOD"
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Performance comparison failed: {e}")
            return {"success": False, "error": str(e)}
    
    def print_tests_summary(self, results: Dict[str, Any]):
        """üìã Affiche r√©sum√© des tests"""
        
        self.logger.info("=" * 60)
        self.logger.info("üß™ R√âSUM√â TESTS ENHANCED EXPERIENCES v3.2.1")
        self.logger.info("=" * 60)
        
        total_tests = len(results)
        successful_tests = sum(1 for r in results.values() if r.get("success", False))
        
        self.logger.info(f"üìä Tests r√©ussis: {successful_tests}/{total_tests}")
        
        for test_name, result in results.items():
            status = "‚úÖ" if result.get("success", False) else "‚ùå"
            self.logger.info(f"{status} {test_name}: {result.get('success', 'Unknown')}")
        
        if successful_tests == total_tests:
            self.logger.info("üéâ TOUS LES TESTS R√âUSSIS - ENHANCED EXPERIENCES OP√âRATIONNEL!")
        else:
            self.logger.warning(f"‚ö†Ô∏è {total_tests - successful_tests} tests √©chou√©s")
        
        # M√©triques cl√©s
        if "performance_comparison" in results and results["performance_comparison"]["success"]:
            perf = results["performance_comparison"]
            self.logger.info(f"‚ö° Performance Enhanced: {perf['enhanced_time_ms']:.2f}ms")
            self.logger.info(f"üéØ Objectif 30s: {'‚úÖ ATTEINT' if perf['target_30s_achieved'] else '‚ùå NON ATTEINT'}")
        
        if "cv_parsing_enhanced" in results and results["cv_parsing_enhanced"]["success"]:
            cv = results["cv_parsing_enhanced"]
            self.logger.info(f"üìä Exp√©riences analys√©es: {cv['experiences_count']}")
            self.logger.info(f"üéØ Missions extraites: {cv['total_missions']}")
            self.logger.info(f"üìà Achievements: {cv['total_achievements']}")

# === FONCTIONS UTILITAIRES DE TEST ===

async def run_quick_enhanced_test():
    """üöÄ Test rapide Enhanced Experiences"""
    logger.info("üöÄ Quick Enhanced Experiences Test")
    
    if not ENHANCED_AVAILABLE:
        logger.error("‚ùå Enhanced not available")
        return False
    
    # Test parsing simple
    cv_simple = "Marc Dubois, Manager, 3 ans exp√©rience, Management √©quipe"
    
    try:
        enhanced_cv = await parse_cv_with_detailed_experiences(cv_simple)
        success = enhanced_cv.name != "Candidat Test"
        
        logger.info(f"‚úÖ Quick test: {success}")
        logger.info(f"üë§ Parsed: {enhanced_cv.name}")
        logger.info(f"üìä Experiences: {len(enhanced_cv.experiences)}")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Quick test failed: {e}")
        return False

def create_test_cv_content() -> str:
    """üìÑ Cr√©e contenu CV test pour d√©monstrations"""
    return """
    Sophie Laurent
    Email: sophie.laurent@email.com
    T√©l√©phone: +33 6 98 76 54 32
    Localisation: Lyon, France
    
    EXP√âRIENCE PROFESSIONNELLE
    
    Product Manager Senior - InnovTech Solutions (2022-2024)
    Secteur: SaaS B2B | CDI | Management √©quipe 8 personnes
    ‚Ä¢ D√©finition roadmap produit et strat√©gie go-to-market
    ‚Ä¢ Management √©quipe 8 d√©veloppeurs et designers
    ‚Ä¢ Coordination projets Agile/Scrum multi-√©quipes
    ‚Ä¢ Analyse donn√©es utilisateurs et m√©triques produit
    ‚Ä¢ N√©gociation partenariats strat√©giques
    R√©alisations:
    ‚Ä¢ Lancement 3 fonctionnalit√©s majeures (+40% engagement)
    ‚Ä¢ R√©duction time-to-market 30%
    ‚Ä¢ Augmentation NPS produit de 45 √† 72
    ‚Ä¢ Certification √©quipe Scrum Master
    Technologies: Jira, Confluence, Figma, Analytics, SQL
    
    Business Analyst - DataCorp (2020-2022)
    Secteur: Conseil Data | CDI | Senior
    ‚Ä¢ Analyse besoins clients et sp√©cifications fonctionnelles
    ‚Ä¢ Mod√©lisation processus m√©tier et optimisation
    ‚Ä¢ Formation √©quipes aux outils BI
    ‚Ä¢ Gestion projets transformation digitale
    R√©alisations:
    ‚Ä¢ 15 projets clients men√©s avec succ√®s
    ‚Ä¢ Am√©lioration processus clients 25% en moyenne
    ‚Ä¢ Formation 50+ utilisateurs Power BI
    Technologies: Power BI, Tableau, SQL, Python
    
    Consultante Junior - StartupAccelerator (2019-2020)
    Secteur: Conseil Startups | CDD | Junior
    ‚Ä¢ Accompagnement startups en phase d'amor√ßage
    ‚Ä¢ Analyse business models et strat√©gies croissance
    ‚Ä¢ Pr√©paration pitchs investisseurs
    R√©alisations:
    ‚Ä¢ 8 startups accompagn√©es vers lev√©e de fonds
    ‚Ä¢ 2M‚Ç¨ lev√©s au total par les clients
    
    FORMATION
    Master Management Innovation - HEC Paris (2019)
    Licence √âconomie Gestion - Universit√© Lyon 2 (2017)
    
    COMP√âTENCES
    Product Management, Agile/Scrum, Data Analysis, SQL, Python,
    Management, Business Intelligence, Strat√©gie, Innovation
    
    LANGUES
    Fran√ßais (natif), Anglais (courant), Allemand (interm√©diaire)
    
    CERTIFICATIONS
    Certified Scrum Master (CSM)
    Google Analytics Certified
    Tableau Desktop Specialist
    """

async def demo_enhanced_workflow():
    """üé¨ D√©monstration workflow Enhanced complet"""
    logger.info("üé¨ === D√âMONSTRATION WORKFLOW ENHANCED COMPLET ===")
    
    cv_content = create_test_cv_content()
    
    try:
        # 1. Parsing Enhanced
        logger.info("üìÑ 1. Parsing CV Enhanced...")
        enhanced_cv = await parse_cv_with_detailed_experiences(cv_content)
        logger.info(f"‚úÖ Parsed: {enhanced_cv.name} ({len(enhanced_cv.experiences)} experiences)")
        
        # 2. Adaptation Enhanced
        if ENHANCED_ADAPTER_AVAILABLE:
            logger.info("üîÑ 2. Adaptation Enhanced...")
            adaptation_result = create_enhanced_unified_matching_request(
                enhanced_cv_data=enhanced_cv,
                pourquoi_ecoute="Recherche √©volution vers direction produit"
            )
            logger.info(f"‚úÖ Adapted: {adaptation_result.success}")
        
        # 3. Extraction motivations
        if ENHANCED_ADAPTER_AVAILABLE:
            logger.info("üéØ 3. Extraction motivations...")
            motivations = extract_motivations_from_experiences(enhanced_cv)
            logger.info(f"‚úÖ Motivations: {motivations}")
        
        # 4. Analyse carri√®re
        if ENHANCED_ADAPTER_AVAILABLE:
            logger.info("üìà 4. Analyse progression...")
            career = analyze_career_progression(enhanced_cv)
            logger.info(f"‚úÖ Career path: {career['career_path']}")
        
        logger.info("üéâ D√©monstration Enhanced workflow compl√®te!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Demo workflow failed: {e}")
        return False

# === POINT D'ENTR√âE PRINCIPAL ===

async def main():
    """üöÄ Point d'entr√©e principal des tests"""
    logger.info("üß™ D√âMARRAGE TESTS ENHANCED EXPERIENCES v3.2.1")
    
    # Test rapide
    quick_success = await run_quick_enhanced_test()
    if not quick_success:
        logger.error("‚ùå Quick test failed, aborting full tests")
        return
    
    # Tests complets
    tests = EnhancedExperiencesTests()
    results = await tests.run_all_tests()
    
    # D√©monstration workflow
    await demo_enhanced_workflow()
    
    logger.info("üéâ Tests Enhanced Experiences termin√©s!")

if __name__ == "__main__":
    asyncio.run(main())
